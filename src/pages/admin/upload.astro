---
import BaseLayout from '../../layouts/BaseLayout.astro';

export const prerender = false;
---

<BaseLayout title="Photo Upload - Admin" description="Upload photos to wedding gallery" lang="en">
  <div class="min-h-screen bg-gray-50">
    <div class="container mx-auto px-8 py-16">
      <div class="max-w-4xl mx-auto">
        <h1 class="text-3xl font-light text-center mb-8 uppercase tracking-wider">
          Photo Upload
        </h1>
        
        <!-- Upload Section -->
        <div class="bg-white rounded-lg shadow-md p-8 mb-8">
          <div class="mb-6">
            <label for="photo-upload" class="block text-lg font-medium text-gray-700 mb-4">
              Select Photos to Upload
            </label>
            <div 
              id="drop-zone"
              class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-gray-400 transition-colors cursor-pointer"
            >
              <div class="space-y-4">
                <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                  <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <div>
                  <p class="text-lg text-gray-600">Drop photos here or click to select</p>
                  <p class="text-sm text-gray-500">Support for JPG, PNG, WEBP files</p>
                </div>
              </div>
              <input
                type="file"
                id="photo-upload"
                accept="image/*"
                multiple
                class="hidden"
              />
            </div>
          </div>

          <div id="selected-files" class="hidden mb-6">
            <h3 class="text-lg font-medium text-gray-700 mb-4">Selected Files</h3>
            <div id="file-list" class="space-y-2 max-h-40 overflow-y-auto"></div>
          </div>

          <div class="flex justify-center">
            <button
              id="upload-btn"
              class="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              disabled
            >
              Upload Photos
            </button>
          </div>

          <!-- Progress Section -->
          <div id="upload-progress" class="hidden mt-6">
            <h3 class="text-lg font-medium text-gray-700 mb-4">Upload Progress</h3>
            <div id="progress-list" class="space-y-3"></div>
          </div>
        </div>

        <!-- Recent Uploads -->
        <div class="bg-white rounded-lg shadow-md p-8">
          <h2 class="text-xl font-medium text-gray-700 mb-6">Recent Uploads</h2>
          
          <div id="loading-recent" class="text-center py-8">
            <div class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <p class="mt-2 text-gray-600">Loading recent photos...</p>
          </div>

          <div id="recent-photos" class="hidden">
            <div id="recent-grid" class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4"></div>
          </div>

          <div id="no-photos" class="hidden text-center py-8">
            <p class="text-gray-600">No photos uploaded yet.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
class PhotoUploader {
  constructor() {
    this.selectedFiles = [];
    this.init();
  }

  init() {
    this.setupEventListeners();
    this.loadRecentPhotos();
  }

  setupEventListeners() {
    const dropZone = document.getElementById('drop-zone');
    const fileInput = document.getElementById('photo-upload');
    const uploadBtn = document.getElementById('upload-btn');

    // File input change
    fileInput.addEventListener('change', (e) => {
      this.handleFileSelection(e.target.files);
    });

    // Drop zone click
    dropZone.addEventListener('click', () => {
      fileInput.click();
    });

    // Drag and drop
    dropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropZone.classList.add('border-blue-400', 'bg-blue-50');
    });

    dropZone.addEventListener('dragleave', (e) => {
      e.preventDefault();
      dropZone.classList.remove('border-blue-400', 'bg-blue-50');
    });

    dropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      dropZone.classList.remove('border-blue-400', 'bg-blue-50');
      this.handleFileSelection(e.dataTransfer.files);
    });

    // Upload button
    uploadBtn.addEventListener('click', () => {
      this.uploadFiles();
    });
  }

  handleFileSelection(files) {
    this.selectedFiles = Array.from(files).filter(file => 
      file.type.startsWith('image/')
    );

    this.displaySelectedFiles();
    
    const uploadBtn = document.getElementById('upload-btn');
    uploadBtn.disabled = this.selectedFiles.length === 0;
  }

  displaySelectedFiles() {
    const selectedFilesDiv = document.getElementById('selected-files');
    const fileList = document.getElementById('file-list');

    if (this.selectedFiles.length === 0) {
      selectedFilesDiv.classList.add('hidden');
      return;
    }

    selectedFilesDiv.classList.remove('hidden');
    fileList.innerHTML = this.selectedFiles.map((file, index) => `
      <div class="flex items-center justify-between p-3 bg-gray-50 rounded">
        <div class="flex items-center space-x-3">
          <div class="w-8 h-8 bg-blue-100 rounded flex items-center justify-center">
            <svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"/>
            </svg>
          </div>
          <div>
            <p class="text-sm font-medium text-gray-900">${file.name}</p>
            <p class="text-xs text-gray-500">${this.formatFileSize(file.size)}</p>
          </div>
        </div>
        <button 
          onclick="photoUploader.removeFile(${index})"
          class="text-red-600 hover:text-red-800 text-sm"
        >
          Remove
        </button>
      </div>
    `).join('');
  }

  removeFile(index) {
    this.selectedFiles.splice(index, 1);
    this.displaySelectedFiles();
    
    const uploadBtn = document.getElementById('upload-btn');
    uploadBtn.disabled = this.selectedFiles.length === 0;
  }

  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  async uploadFiles() {
    if (this.selectedFiles.length === 0) return;

    const uploadBtn = document.getElementById('upload-btn');
    const progressDiv = document.getElementById('upload-progress');
    const progressList = document.getElementById('progress-list');

    uploadBtn.disabled = true;
    uploadBtn.textContent = 'Uploading...';
    progressDiv.classList.remove('hidden');
    progressList.innerHTML = '';

    const uploadPromises = this.selectedFiles.map(async (file, index) => {
      const progressItem = this.createProgressItem(file.name, index);
      progressList.appendChild(progressItem);

      try {
        const formData = new FormData();
        formData.append('file', file);

        const response = await fetch('/api/photos', {
          method: 'POST',
          body: formData,
        });

        if (!response.ok) {
          throw new Error(`Failed to upload ${file.name}`);
        }

        const result = await response.json();
        this.updateProgressItem(index, 'success', 'Uploaded successfully');
        return result;
      } catch (error) {
        this.updateProgressItem(index, 'error', error.message);
        throw error;
      }
    });

    try {
      await Promise.all(uploadPromises);
      
      // Reset form
      this.selectedFiles = [];
      document.getElementById('photo-upload').value = '';
      document.getElementById('selected-files').classList.add('hidden');
      
      // Reload recent photos
      await this.loadRecentPhotos();
      
      // Show success message
      this.showMessage('All photos uploaded successfully!', 'success');
    } catch (error) {
      this.showMessage('Some uploads failed. Please try again.', 'error');
    } finally {
      uploadBtn.disabled = false;
      uploadBtn.textContent = 'Upload Photos';
    }
  }

  createProgressItem(fileName, index) {
    const div = document.createElement('div');
    div.id = `progress-${index}`;
    div.className = 'flex items-center justify-between p-3 bg-gray-50 rounded';
    div.innerHTML = `
      <div class="flex items-center space-x-3">
        <div class="w-6 h-6">
          <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
        </div>
        <span class="text-sm font-medium text-gray-900">${fileName}</span>
      </div>
      <span class="text-sm text-gray-600">Uploading...</span>
    `;
    return div;
  }

  updateProgressItem(index, status, message) {
    const item = document.getElementById(`progress-${index}`);
    if (!item) return;

    const icon = status === 'success' 
      ? '<svg class="w-6 h-6 text-green-600" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/></svg>'
      : '<svg class="w-6 h-6 text-red-600" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/></svg>';

    const statusColor = status === 'success' ? 'text-green-600' : 'text-red-600';

    item.innerHTML = `
      <div class="flex items-center space-x-3">
        <div class="w-6 h-6">${icon}</div>
        <span class="text-sm font-medium text-gray-900">${item.querySelector('span').textContent}</span>
      </div>
      <span class="text-sm ${statusColor}">${message}</span>
    `;
  }

  async loadRecentPhotos() {
    const loadingDiv = document.getElementById('loading-recent');
    const recentDiv = document.getElementById('recent-photos');
    const noPhotosDiv = document.getElementById('no-photos');
    const recentGrid = document.getElementById('recent-grid');

    loadingDiv.classList.remove('hidden');
    recentDiv.classList.add('hidden');
    noPhotosDiv.classList.add('hidden');

    try {
      const response = await fetch('/api/photos?per_page=12');
      if (!response.ok) {
        throw new Error('Failed to fetch recent photos');
      }

      const data = await response.json();
      const photos = data.result?.images || [];

      loadingDiv.classList.add('hidden');

      if (photos.length === 0) {
        noPhotosDiv.classList.remove('hidden');
      } else {
        recentGrid.innerHTML = photos.map(photo => {
          const thumbnailUrl = photo.variants.find(v => v.includes('thumbnail')) || photo.variants[0];
          return `
            <div class="relative group">
              <img
                src="${thumbnailUrl}"
                alt="Recent upload"
                class="w-full h-24 object-cover rounded-lg"
              />
              <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-opacity rounded-lg flex items-center justify-center">
                <button
                  onclick="photoUploader.deletePhoto('${photo.id}')"
                  class="text-white opacity-0 group-hover:opacity-100 transition-opacity p-2 hover:bg-red-600 rounded"
                  title="Delete photo"
                >
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9zM4 5a2 2 0 012-2h8a2 2 0 012 2v10a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 112 0v4a1 1 0 11-2 0V9zm4 0a1 1 0 112 0v4a1 1 0 11-2 0V9z" clip-rule="evenodd"/>
                  </svg>
                </button>
              </div>
            </div>
          `;
        }).join('');
        recentDiv.classList.remove('hidden');
      }
    } catch (error) {
      loadingDiv.classList.add('hidden');
      this.showMessage('Failed to load recent photos', 'error');
    }
  }

  async deletePhoto(photoId) {
    if (!confirm('Are you sure you want to delete this photo?')) return;

    try {
      const response = await fetch(`/api/photos?id=${photoId}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw new Error('Failed to delete photo');
      }

      this.showMessage('Photo deleted successfully', 'success');
      await this.loadRecentPhotos();
    } catch (error) {
      this.showMessage('Failed to delete photo', 'error');
    }
  }

  showMessage(message, type) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
      type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
    }`;
    messageDiv.textContent = message;
    
    document.body.appendChild(messageDiv);
    
    setTimeout(() => {
      messageDiv.remove();
    }, 5000);
  }
}

// Initialize the uploader
let photoUploader;
document.addEventListener('DOMContentLoaded', () => {
  photoUploader = new PhotoUploader();
});
</script>